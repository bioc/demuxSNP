object.size(vcf)
rm(vcf)
vcf
vcf<-readVcf('test.vcf')
vcf
object.size(vcf)
use_data(vcf,force=TRUE)
library(devtools)
use_data(vcf)
use_data(vcf,overwrite=TRUE)
sce<-sce
library(Seurat)
seurat<-as.seurat(sce)
seurat<-as.Seurat(sce)
logcounts(sce)<-NULL
seurat<-as.Seurat(sce)
seurat<-as.Seurat(sce,data=NULL)
seurat
sce
altExp(sce)
logcounts(altExp(sce))<-NULL
altExp(sce)
use_data(sce,overwrite = TRUE)
check()
#  %\VignetteEncoding{UTF-8}
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
sce
library(SNPcheck)
sce
sce<-sce
vcf
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
#  %\VignetteEncoding{UTF-8}
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
sce <- sce
load_all()
sce
sce<-sce
load_all()
library(devtools)
load_all()
sce<-sce
install()
sce
library(SNPcheck)
sce
snps
getwd()
load_all()
sce
sce<-sce
data()
document()
document()
sce
load("C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNPs/github/SNPcheck/data/sce.rda")
load("C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNPs/github/SNPcheck/data/snps.rda")
load("C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNPs/github/SNPcheck/data/vcf.rda")
sce
rm(sce)
sce
check()
data(sce,vcf,snps,package="SNPcheck")
check()
htos <- as.data.frame(t(log(counts(altExp(sce, "HTO")))))
htos <- as.data.frame(t(counts(altExp(sce, "HTO")))))
htos <- as.data.frame(t(counts(altExp(sce, "HTO"))))
counts(altExp(sce, "HTO"))
as.matrix(counts(altExp(sce, "HTO")))
htos <- as.data.frame(t(as.matrix(counts(altExp(sce, "HTO")))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
#  %\VignetteEncoding{UTF-8}
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
data(sce,vcf,snps,package="SNPcheck")
htos <- as.data.frame(t(as.matrix(counts(altExp(sce, "HTO")))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x2 <- gghistogram(htos, x = "Hashtag2", fill = dittoColors(1)[2], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x3 <- gghistogram(htos, x = "Hashtag3", fill = dittoColors(1)[3], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x4 <- gghistogram(htos, x = "Hashtag4", fill = dittoColors(1)[4], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x5 <- gghistogram(htos, x = "Hashtag5", fill = dittoColors(1)[5], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x6 <- gghistogram(htos, x = "Hashtag6", fill = dittoColors(1)[6], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
ggarrange(x1, x2, x3, x4, x5, x6, align = "hv", ncol = 3, nrow = 2)
htos <- as.data.frame(t(as.matrix(log(counts(altExp(sce, "HTO"))))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
htos <- as.data.frame(t(as.matrix(log(counts(altExp(sce, "HTO"))))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x2 <- gghistogram(htos, x = "Hashtag2", fill = dittoColors(1)[2], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x3 <- gghistogram(htos, x = "Hashtag3", fill = dittoColors(1)[3], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x4 <- gghistogram(htos, x = "Hashtag4", fill = dittoColors(1)[4], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x5 <- gghistogram(htos, x = "Hashtag5", fill = dittoColors(1)[5], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x6 <- gghistogram(htos, x = "Hashtag6", fill = dittoColors(1)[6], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
ggarrange(x1, x2, x3, x4, x5, x6, align = "hv", ncol = 3, nrow = 2)
check()
readVcf(test.vcf,"GRCh38")
readVcf('test.vcf',"GRCh38")
vcf<-readVcf('test.vcf',"GRCh38")
use_data(vcf,overwrite = TRUE)
check()
library(devtools)
load_all()
check()
ensdb<-EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
object.size(ensdb)
use_data(ensdb)
check()
check()
load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
#  %\VignetteEncoding{UTF-8}
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
data(sce,vcf,snps,package="SNPcheck")
htos <- as.data.frame(t(as.matrix(log(counts(altExp(sce, "HTO"))))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x2 <- gghistogram(htos, x = "Hashtag2", fill = dittoColors(1)[2], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x3 <- gghistogram(htos, x = "Hashtag3", fill = dittoColors(1)[3], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x4 <- gghistogram(htos, x = "Hashtag4", fill = dittoColors(1)[4], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x5 <- gghistogram(htos, x = "Hashtag5", fill = dittoColors(1)[5], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x6 <- gghistogram(htos, x = "Hashtag6", fill = dittoColors(1)[6], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
ggarrange(x1, x2, x3, x4, x5, x6, align = "hv", ncol = 3, nrow = 2)
seurat <- as.Seurat(sce,data=NULL)
seurat <- HTODemux(seurat)
seurat$hash.ID <- factor(as.character(seurat$hash.ID))
sce$seurat <- seurat$hash.ID
sce$seurat <- seurat$hash.ID
seurat$libsize <- colSums(GetAssayData(seurat,slot="counts",assay="RNA"))
dittoPlot(seurat, "libsize", group.by = "hash.ID")
top_genes <- common_genes(sce = sce)
subset_vcf(vcf, top_genes = top_genes,ensdb)
vcf
vcf<-vcf
data(sce,vcf,snps,ensdb,package="SNPcheck")
library(devtools)
data(sce,vcf,snps,ensdb,package="SNPcheck")
install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
#  %\VignetteEncoding{UTF-8}
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
data(sce,vcf,snps,ensdb,package="SNPcheck")
data(sce,vcf,snps,ensdb,package="SNPcheck")
htos <- as.data.frame(t(as.matrix(log(counts(altExp(sce, "HTO"))))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x2 <- gghistogram(htos, x = "Hashtag2", fill = dittoColors(1)[2], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x3 <- gghistogram(htos, x = "Hashtag3", fill = dittoColors(1)[3], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x4 <- gghistogram(htos, x = "Hashtag4", fill = dittoColors(1)[4], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x5 <- gghistogram(htos, x = "Hashtag5", fill = dittoColors(1)[5], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
x6 <- gghistogram(htos, x = "Hashtag6", fill = dittoColors(1)[6], palette = "lancet", xlim = c(0, 7), ylim = c(0, 1000), alpha = 1)
ggarrange(x1, x2, x3, x4, x5, x6, align = "hv", ncol = 3, nrow = 2)
seurat <- as.Seurat(sce,data=NULL)
seurat <- HTODemux(seurat)
seurat$hash.ID <- factor(as.character(seurat$hash.ID))
sce$seurat <- seurat$hash.ID
sce$seurat <- seurat$hash.ID
seurat$libsize <- colSums(GetAssayData(seurat,slot="counts",assay="RNA"))
dittoPlot(seurat, "libsize", group.by = "hash.ID")
top_genes <- common_genes(sce = sce)
subset_vcf(vcf, top_genes = top_genes,ensdb)
top_genes <- common_genes(sce = sce)
subset_vcf(vcf, top_genes = top_genes,ensdb)
my_vcf<-vcf
SNP_ranges <- SummarizedExperiment::rowRanges(my_vcf)
my_vcf_inbound <- my_vcf[BiocGenerics::end(SNP_ranges) <= GenomeInfoDb::seqlengths(SNP_ranges)[as.character(GenomeInfoDb::seqnames(SNP_ranges))]]
SNP_ranges_inbound <- SummarizedExperiment::rowRanges(my_vcf_inbound)
gns <- ensembldb::genes(ensdb)#EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
genes(ensdb)
head(ensdb)
ensdb
ensdb
EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
ensdb<-EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
genes(ensdb)
ensdb
use_data(ensdb,overwrite = TRUE)
top_genes <- common_genes(sce = sce)
subset_vcf(vcf, top_genes = top_genes,ensdb)
load("C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNPs/github/SNPcheck/data/ensdb.rda")
genes(ensdb)
load_all()
check()
?EnsDb
check()
check()
check()
library(devtools)
load_all()
check()
biocCheck()
BiocCheck::BiocCheck()
install()
browseVignettes("SNPcheck")
devtools::install_github("michaelplynch/SNPcheck", build_vignettes = TRUE)
browseVignettes(package="SNPcheck")
library(biocthis)
?use_bioc_vignette()
use_bioc_vignette(SNP,"Supervised SNP demultiplexing")
use_bioc_vignette("Supervised SNP demultiplexing")
use_bioc_vignette(vignette,title="Supervised SNP demultiplexing")
use_bioc_vignette(SNPcheck,title="Supervised SNP demultiplexing")
use_bioc_vignette("SNPcheck",title="Supervised SNP demultiplexing")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
crop = NULL ## Related to https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016656.html
)
## Track time spent on making the vignette
startTime <- Sys.time()
## Bib setup
library("RefManageR")
## Write bibliography information
bib <- c(
R = citation(),
BiocStyle = citation("BiocStyle")[1],
knitr = citation("knitr")[1],
RefManageR = citation("RefManageR")[1],
rmarkdown = citation("rmarkdown")[1],
sessioninfo = citation("sessioninfo")[1],
testthat = citation("testthat")[1],
SNPcheck = citation("SNPcheck")[1]
)
check()
library(devtools)
check()
check()
check()
library(utils)
check()
?sessionInfo
check()
?sessionInfo
?sessioninfo
library(sessioninfo)
check()
?ggarnage
?ggarrange
library(ggpubr)
?ggarrange
library(devtools)
load_all()
check()
install()
check()
check()
BiocCheck::BiocCheck()
library(devtools)
install()
check()
check()
?log
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
library(utils)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
data(sce,vcf,snps,package="SNPcheck")
htos <- as.data.frame(t(as.matrix(log(counts(altExp(sce, "HTO"))))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x2 <- gghistogram(htos, x = "Hashtag2", fill = dittoColors(1)[2], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x3 <- gghistogram(htos, x = "Hashtag3", fill = dittoColors(1)[3], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x4 <- gghistogram(htos, x = "Hashtag4", fill = dittoColors(1)[4], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x5 <- gghistogram(htos, x = "Hashtag5", fill = dittoColors(1)[5], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x6 <- gghistogram(htos, x = "Hashtag6", fill = dittoColors(1)[6], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
ggarrange(x1, x2, x3, x4, x5, x6, align = "hv", ncol = 3, nrow = 2)
seurat <- as.Seurat(sce,data=NULL)
seurat <- HTODemux(seurat)
seurat$hash.ID <- factor(as.character(seurat$hash.ID))
sce$seurat <- seurat$hash.ID
sce$seurat <- seurat$hash.ID
table(sce$seurat)
seurat$libsize <- colSums(GetAssayData(seurat,slot="counts",assay="RNA"))
dittoPlot(seurat, "libsize", group.by = "hash.ID")
top_genes <- common_genes(sce = sce)
ensdb<-EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
subset_vcf(vcf, top_genes = top_genes,ensdb)
sce <- consensus_calls(sce)
sce <- add_snps(sce, snps, thresh = 0.95)
altExp(sce, "SNP")
test <- Heatmap(counts(altExp(sce, "SNP")),
column_split = sce$seurat,
cluster_rows = FALSE,
show_column_names = FALSE,
cluster_column_slices = FALSE,
column_title_rot = -45,
row_title = "SNPs",
col = colors)
draw(test,column_title="test"
test <- Heatmap(counts(altExp(sce, "SNP")),
column_split = sce$seurat,
cluster_rows = FALSE,
show_column_names = FALSE,
cluster_column_slices = FALSE,
column_title_rot = -45,
row_title = "SNPs",
col = colors)
draw(test,column_title="test")
?readVcf
seqinfo(vcf)
seqinfo(vcf)[1]
seqinfo(vcf)@genome[1]
seqinfo(ensdb)@genome[1]
table(sce$train)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
library(utils)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
fig.width = 7.5
)
library(SNPcheck)
library(ComplexHeatmap)
library(viridisLite)
library(Seurat)
library(ggpubr)
library(dittoSeq)
library(utils)
colors <- structure(viridis(n = 3), names = c("-1", "0", "1"))
data(sce,vcf,snps,package="SNPcheck")
htos <- as.data.frame(t(as.matrix(log(counts(altExp(sce, "HTO"))))))
x1 <- gghistogram(htos, x = "Hashtag1", fill = dittoColors(1)[1], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x2 <- gghistogram(htos, x = "Hashtag2", fill = dittoColors(1)[2], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x3 <- gghistogram(htos, x = "Hashtag3", fill = dittoColors(1)[3], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x4 <- gghistogram(htos, x = "Hashtag4", fill = dittoColors(1)[4], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x5 <- gghistogram(htos, x = "Hashtag5", fill = dittoColors(1)[5], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
x6 <- gghistogram(htos, x = "Hashtag6", fill = dittoColors(1)[6], palette = "lancet", xlim = c(0, 10), ylim = c(0, 1000), alpha = 1)
ggarrange(x1, x2, x3, x4, x5, x6, align = "hv", ncol = 3, nrow = 2)
seurat <- as.Seurat(sce,data=NULL)
seurat <- HTODemux(seurat)
seurat$hash.ID <- factor(as.character(seurat$hash.ID))
sce$seurat <- seurat$hash.ID
sce$seurat <- seurat$hash.ID
table(sce$seurat)
seurat$libsize <- colSums(GetAssayData(seurat,slot="counts",assay="RNA"))
dittoPlot(seurat, "libsize", group.by = "hash.ID")
top_genes <- common_genes(sce = sce)
top_genes[1:10]
ensdb<-EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
seqinfo(vcf)@genome[1]==seqinfo(ensdb)@genome[1]
subset_vcf(vcf, top_genes = top_genes,ensdb)
sce <- consensus_calls(sce)
table(sce$train)
dim(snps)
sce <- add_snps(sce, snps, thresh = 0.95)
altExp(sce, "SNP")
test <- Heatmap(counts(altExp(sce, "SNP")),
column_split = sce$seurat,
cluster_rows = FALSE,
show_column_names = FALSE,
cluster_column_slices = FALSE,
column_title_rot = -45,
row_title = "SNPs",
col = colors)
draw(test,column_title="SNP profiles split by Seurat Hashtag call")
sce <- reassign(sce, k = 5)
table(sce$knn)
test <- Heatmap(counts(altExp(sce, "SNP")),
column_split = sce$knn,
cluster_rows = FALSE,
show_column_names = FALSE,
cluster_column_slices = FALSE,
column_names_rot = 45,
column_title_rot = -45,
row_title = "SNPs",
col = colors)
draw(test,column_title="SNP profiles split by updated knn classification")
test <- Heatmap(counts(altExp(sce, "SNP"))[, sce$knn == "Hashtag5"],
column_split = sce$seurat[sce$knn == "Hashtag5"],
cluster_rows = FALSE,
show_column_names = FALSE,
cluster_column_slices = FALSE,
column_names_rot = 45,
column_title_rot = -45,
row_title = "SNPs",
col = colors)
draw(test,column_title="knn Hashtag5 group split by original Seurat classification")
sce_test<-sce[,sce$train==TRUE]
?reassign
sce_test<-sce[,sce$train==TRUE]
sce_test$knn<-NULL
sce_test<-reassign(sce_test,train_cells = sce_test$train,predict_cells = sce_test$train)
table(sce_test$knn)
table(sce_test$labels,sce_test$knn)
table(sce_test$labels)
table(sce$labels)
table(sce_test$labels)
levels(sce_test$labels)
sce_test$labels<-droplevels(sce_test$labels)
table(sce_test$labels)
which(sce_test$labels=="Hashtag5")
sce_test$knn<-NULL
table(sce_test$labels)
sce_test$labels2<-droplevels(sce_test$labels)
sce_test$label2[which(sce_test$labels=="Hashtag5")[1:25]]<-"Hashtag2"
which(sce_test$labels=="Hashtag5")[1:25]
sce_test$label2[c(which(sce_test$labels=="Hashtag5")[1:25])]<-"Hashtag2"
c(which(sce_test$labels=="Hashtag5")[1:25])
sce_test$labels2<-droplevels(sce_test$labels)
sce_test$label2[c(which(sce_test$labels2=="Hashtag5")[1:25])]<-"Hashtag2"
sce_test$labels2[1]<-"Hashtag2"
sce_test$label2[which(sce_test$labels2=="Hashtag5")]<-"Hashtag2"
?rep
sce_test$label2[which(sce_test$labels2=="Hashtag5")[1:25]]<-rep("Hashtag2",25)
rep("Hashtag2",25)
sce_test$labels[1]<-"Hashtag2"
sce_test$labels[c(1,2)]<-"Hashtag2"
t<-which(sce_test$labels2=="Hashtag5")[1:25]
sce_test$label2[t]<-"Hashtag2"
sce_test$labels2[t]<-"Hashtag2"
sce_test$labels2[which(sce_test$labels2=="Hashtag5")[1:25]]<-"Hashtag2"
table(sce_test$labels,sce_test$labels2)
sce_test<-reassign(sce_test,train_cells = sce_test$train, predict_cells = sce_test$train)
sce_test$knn
table(sce_test$knn)
table(sce_test$knn,sce_test$labels)
table(sce$train)
table(sce$train)
table(sce_test$knn)
table(sce_test$labels,sce_test$knn)
table(sce_test$labels)
install()
library(devtools)
load_all()
install()
?common_genes
data(sce,vcf,snps,package="SNPcheck")
class(sce)
class(vcf)
class(snps)
class(snps)
load_all()
check()
class(vcf)
top_genes<-common_genes(sce)
tg<-as.numeric(top_genes)
check()
install.packages("changer")
changer::changer(demuxSNP)
changer::changer(new_name=demuxSNP)
changer::changer(path="",new_name=demuxSNP)
changer::changer(path="C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNP/github/SNPcheck",new_name=demuxSNP)
changer::changer(path="C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNPs/github/SNPcheck",new_name=demuxSNP)
changer::changer(path="C:/Users/michael.lynch/Culhane_Lab Dropbox/Shared_Lab_Folder/SNPs/github/SNPcheck",new_name="demuxSNP")
check()
